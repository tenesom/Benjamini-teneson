---
title: "R Programming: Biginner's introduction Leson 1."
author: "Benjamini Mpinga"
date: "2023-04-30"
categories: [Skills]
---

### INTRODUCTION.

I might be correct if i say you have heard about R programming language as well as many good tips concerning R experience but i want to share with you some other interesting part of R, Another good news for beginners in R language is that, in your progress toward mastering R, you will get a wonderful experience, Imagine the simplicity of preparing a single document on R editor, yet allows you to share it in multiple format such as **Pdf, Word or html**. Yet with R it is not an imaginations **it is what it is**. And good example is this post you are reading it's also the product of R.

![](R_base.jpg)

### R MIRACULOUS.

- Coding skills
- Writing skills
- Generation of multiple extension from a single document
- Document standard/visualization 
- Data analysis skills
- Statistical knowledge and many others.
 
In almost every book i read concerning R Programming, they all make you courageous and ambitious, well that is what exactly the authors want you be, so that you might start with hope. Although it is good to read, especially when you love to, in my personal experience i think is also good to have a **Mentor** rather than relying on **Roll model(s) alone.**

I am not discouraging one from rely and spend time in books, no!, but what  i am trying to advice is that, through reading or searching online contents you can find best solutions, but for beginners in R Programming Language, it is better to have someone who can take you through obstacles, someone who can spend sometimes with you, introducing obvious expected challenges and prepare you to tackle them. 

#### R Mentor vs R Roll model

**A Mentor** is a person well equipped/advanced in respect of this topic **(with R knowledge)** a person either present in your environment or who you can have direct access to find in case you get stack or need more technique in your learning process.

On the other hand a **Roll model** is a person well equipped/advanced in R knowledge but the only help you can get from him/her is information through their writings or documentaries, though they may be usefully but also they may not solve all of your quick concerns.

### MODERN R.

To get started with R programming language, you must firstly install R and Rstudio on your computer, You might wonder, **What is R and Rstudio?**. Well R is a programming language and Rstudio is a working platform where you find working environment, but together provides you a great experience.

After the installation of R and RStudio, then you will nee to install packages which support R and RStudio to work/function. These packages provide functions which will be required in performance of your daily activities. So once you have installed All necessary packages, come automatically with their the functions.

To download R, go to CRAN, the comprehensive R archive network. CRAN is composed of a set of mirror servers distributed around the world and is used to distribute R and R packages. Don’t try and pick a mirror that’s close to you: instead use the cloud mirror, https://
cloud.r-project.org, which automatically figures it out for you.

A new major version of R comes out once a year, and there are 2–3 minor releases each year. It’s a good idea to update regularly. Upgrading can be a bit of a hassle, especially for major versions, which require you to re install all your packages, but putting it off only makes it worse.

### RStudio INSTALATION.

RStudio is an integrated development environment, or IDE, for R programming. Download and install it from http://WWW.rstudio.com/download. 

![](r_studio.jpg)

#### R Package installation.

In R, as i have explained here above, packages are very fundamental instrument, therefor you need to install all the necessary packages before getting further. One main package is (**"tidyverse"**). tidyverse is an ecosystem of packages that focus on data entry, data manipulation, data modelling, data visualization(plot) and sharing of finding/insight derived from data analysis.

Install tidyverse through this command and any other packages as you will find fit for your own focused area.
                    
                             [ install.packages("tidyverse") ]
  
                      
Packages in the tidyverse change fairly frequently. You can see if updates are available, and optionally install them, by running tidy verse_update().

### INTRODUCTION TO DATA SCIENCE IN R PROGRAMME.

Data science is a huge field, and there’s no way you can master it by reading a single book, so as i explained above it is more helpful if you get a mentor to lead you through obstacles. Also is an exciting knowledge that allows you to turn raw data into understanding, insight, and knowledge. The goal of R for Data Science is to help you to learn the most important tools in R that will allow you to do data science.

#### Data importation

First you must import your data into R. This means that you take data stored in a file, database, or web API, and load it into a data frame in R first. If you can’t put your data into R, you can’t do data science on it!.

#### Tyding

Once you’ve imported your data, it is required to tidy your data. Tidying your data means storing it in a consistent form that matches the semantics of the data set with the way it is stored. In brief, when your data is tidy, **each column is a variable, and each row is an observation.** Tidy data is important because the consistent structure allows you to focus your struggle on questions about the data, and not fighting the data into the right form for different functions.

Once you have tidy data, a first step is to transform it. Transformation includes narrowing in on observations of interest eg.(all people in one city, or all data from the last year), creating new variables that are functions of existing variables Together, tidying and transforming are called wrangling, this is because, getting your data in a form that’s natural to work with often, it usually feels like a fight!.

Once you have tidy your data with the variables you need, there are two main engines of knowledge generation: **visualization and modeling**. These have complementary strengths and weaknesses, so any real analysis will iterate between them many times.

#### Visualization

Visualization is a fundamentally human activity. A good visualization will show you things that you did not expect, or raise new questions about the data. A good visualization might also hint that you’re asking the wrong question, or you need to collect different data. Visualizations can surprise you, because they require a human to interpret them.

#### Models

Models are complementary tools to visualization. Once you have made your questions sufficiently precise, you can use a model to answer them. Models are a fundamentally mathematical or computational tool, so they generally scale well. Even when they don’t, every model can make assumptions, and by its very nature a model cannot question its own assumptions. That means a model cannot fundamentally surprise you.

#### Communication

The last step of data science is communication, an absolutely critical part of any data analysis project. It doesn’t matter how well your models and visualization have led you to understand the data unless you can also communicate your results to others.


```{mermaid}
%%| label: fig-mermaid
%%| fig-width: 6
%%| fig-cap: How R programming work in analysis.
flowchart LR
 A[(Import)] --> B[Tidy]
 B --> C(Transform)
 C --> D(Visualize) 
 C --> E(Model)
 D --> F{Communicate}
 E --> F
 F --> G[/HTML/]
 F --> H[/PDF/]
 F --> I[/WORD/]

 
 

```


### RULES OF THE GAME IN R

Like any other game or language, in order to perform or being grammatical correct you have to apply the correct verb for a particular tense. As well as correct action for a specific environment. The same applies to R programming language, for the better result of your data analysis you have to apply the correct package for a specific task, every package contains functions in which there are verbs that act to perform a particular task.

This will provides an introduction to data science and the R programming language. The goal here is to get your hands dirty right from the start!, We will walk through an entire data analysis, and along the way introduce different types of data analysis question, some fundamental programming concepts in R, and the basics of loading, cleaning, and visualizing data. we will dig into each of these steps in much more detail.

### DATA TRANSFORMATION WITH DPLYR.

**Introduction**

Visualization is an important tool for insight generation, but it is rare that you get the data in exactly the right form you need. Often you’ll need to create some new variables or summaries, or maybe you just want to rename the variables or reorder the observations in order to make the data a little easier to work with. let's focus on how to use the dplyr package, another core member of the tidyverse.

There are five key dplyr functions, which allow you to solve the vast majority of your data-manipulation challenges, These six functions, provide solutions for data manipulation.

  **VERBS**
  
- (filter()).
- (arrange()).
- (select()).
- (mutate()).
- (summarize()).
- (group_by()).

#### Filter

Filter is one of the verb in tidyverse which usually deals with **rows(records)** only in your data frame,the main thing it does is to pick observations by their volume depends on the result you intend to achieve.
**(==,>,<)**.

#### Select

Select is one of the verb in tidyverse which usually deals with **coll um (variables)** only in your table data frame,what it does is to select the variables by their names depends on the result you intend to achieve.**(=)**.

#### Arrange

Arrange is one of the verb in tidyverse which usually Reorder the **rows(Records)** of your data frame to allow you get result you intend.

#### Summarize

Summarize is one of the verb in tidyverse which Collapse many values down to a single summary

#### Group by

Group by  is one of the verb in tidyverse used in  changes of the scope of each function from operating on the entire data frame to operating on it group-by-group.

#### Mutate

Mutate is one of the verb in tidyverse Create new variables with functions of existing variables.

> **NOTE**: All data frame contain Row and Column, therefore rows have to contains Records in it, while column have to contain variables in it (names). to successfully implement the above said verbs, you will have to ensure the following..

- firstly you will have to be very clear on What kind of result you need, this depends on the questions.
- Secondly is to understand data provided before importing it to R, for analysis. (To peruse them and see if they are tidy data or messy data).
- Thirdly if they are tidy, and you have already understand a question, then you need to know which kind of verb you can use to get the result. but if data are messy, then you will need to tidy them before importation or if already imported then require tidying before further steps.

- **“Happy families are all alike; every unhappy family is unhappy in its own way.” ––- Leo Tolstoy**

- **“Tidy data sets are all alike, but every messy data set is messy in its own way.” ––- Hadley Wickham**

**Shortly we have several types of data type....**

1. ` Character --- these type of data are strings/names.
1. ` Double/Numeric --- these type are measurable data/decimals.
1. ` Integer  --- these are numbered data/countable (0 to 9).
1. ` Factor --- these data are categorical/level.
1. ` Date ---  Basically deal with dmy.

**Abbreviation**

- **int** stands for integers.
- **dbl** stands for doubles, or real numbers.
- **chr** stands for character vectors, or strings.
- **dttm** stands for date-times (a date + a time).

R provides the standard suite: >, >=, <, <=, != (not equal), and == (equal). When you’re new in R, the easiest mistake to make is to use = instead of == when testing for equality. 

### R AND TIDYVERSE.

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
require(tidyverse)
require(lubridate)
require(dplyr)
require(lubridate)
require(readxl)
require(janitor)
require(magrittr)
require(readr)
```


lets try a to create a vector of 5 kids, include their names, age, food habit, and birth date. by doing this activity, we shall cover all five types of data, which are...

1. ` character
1. ` numeric
1. ` integer
1. ` factor
1. ` date
1. ` logical

#### character vector (NAMES).

```{r}
names = c("grace", "daniel", "collins", "ethan", "benjunior")
names
```

lets test if our vector is character

```{r}
is.character(names); is.vector(names); is.factor(names);class(names)
```
```{r}
names[2:5]
```

#### integer vector (FOOD)

```{r}
food = c(1,2,3,4,5)
food
```

lets test if our food is integer vector

```{r}
is.integer(food); is.vector(food); is.character(food); is.numeric(food); is.factor(food)
```

now as we may see our results, show that our integer vector is FALSE, and Numeric is TRUE, then we have to change from numeric to integer. You may wonder why our integer resulted to numeric while we had created an integer vector?. well the reason is that in R, most of its understanding (default) data is Numeric, therefor is so obvious to find same result over and over.


```{r}
food = as.integer(food)
food
is.integer(food)
```

#### Numeric vector (AGE)

```{r}
age = c(11.5, 5.2, 5.3, 3.2, 1.2)
age
```

let's test our numeric vector

```{r}
is.numeric(age); is.integer(age); is.character(age); class(age)
```

#### factor vector (GENDER)

```{r}
gender = c("female", "male", "male", "male", "male")
gender
```

let's test is our vector factor?

```{r}
class(gender); is.integer(gender); is.numeric(gender); is.factor("gender")

```

Again as we can see the above result, our factor has appeared as character while we created a factor class, so let's convert it to factor. Do not stress your self with that default when happen.

```{r}
gender = as.factor(gender)
gender
```

```{r}
class(gender); is.integer(gender); is.factor(gender); is.character(gender)
```

```{r}
levels(gender)
```

#### date vector (BIRTH DATE)

```{r}
birth = c(dmy(01022011), dmy(01062017), dmy(01052017), dmy(01062019), dmy(01062021))
birth
```
As we can see our date vector shows date, month and year, now let's test it.

```{r}
class(birth); is.integer(birth);is.numeric(birth);is.Date(birth);is.vector(birth)
```

#### Sequence

```{r}
seq(0:100)
```


```{r}
number = seq(from = 0, to = 100, by = 2)
number
```

```{r}
length(number)
```

#### Index

```{r}
number[51]
```

#### Repeat an element in a vector

```{r}
rep(names,each = 3)
```

```{r}
rep(names,times = 3)
```

#### Adding an index in a vector

```{r}
names [6] = "amani"
names
```

#### removing an index in vector

```{r}
names = names[1:5]
names
```

```{r}
length(names); length(food); length(age); length(birth)
```

### DATA FRAME.

Now that we have created our vector. Let us see how we turn our vector to data frame. We shall use the function data.frame(), then we put our vectors within the function.

```{r}
data.frame(names, birth, age, food, gender )
```

#### Equate the data frame

```{r}
watoto = data.frame(names, birth, age, food, gender)
watoto
```

### APPLICATION OF R VERBS.

  **VERBS**
  
- (filter()).
- (arrange()).
- (select()).
- (mutate()).
- (summarize()).
- (group_by()).


#### fillter

```{r}
watoto %>% filter(gender == "male")
```


```{r}
watoto %>% filter(birth == dmy(01022011) | birth == dmy(01062019))
```


```{r}
watoto %>% filter(birth == dmy(01022011) & gender == "female")
```

#### Select

```{r}
watoto %>% select(names,gender)
```

```{r}
watoto %>% select(1:4)
```

#### arrange

```{r}
watoto %>% arrange(watoto)
```

```{r}
watoto %>% arrange(desc(food))
```

#### Mutate

```{r}
watoto %>% mutate(sport = c("footbal", "footbal","voleybal", "basketbal", "netbal"))
```

### DATA IMPOTATION.

As we have seen in the beginning of this book,in order to do activities in R,you need data, without data R is like meaningless  application in your computer.So since data work as a fuel in R, step one you need to know how to import data into it. Data importation in R reefers to the process of calling your data from the directory (file) in your computer into the R studio where you intend to do your analysis.

#### Step 1.

You have to know what kind of data you have before importing it in R. Data are usually in different extension, so you have to ensure you put your data in the right extension in your local directory.  **Eg. xls, csv etc.......**
  
#### Step 2.

On your computer open R studio, programming is usually done on console. But in the bellow demo i will work on the editor.

**Procedures.**

My data names is (Tamisemi Primary Enrollment by Age and Sex,2021.xls"). So open a chunk then within a chunk call a required package then run the chunk. Then Open another chunk then within the chunk call your data from your local/external directory. Example, If your data are in Excel or csv extension, so i will use the package **(tidyverse, read_excel and read_csv).**

how do we call our data from our directory?

```{r}
read_csv("e:/Mystafs/blogswebsite/teneson/posts/R-introduction/BUDGET DAUDI HEALTH CENTRE 2022.csv")
```

the above data frame are showing the importation of data from your directory into R, using csv extension.

```{r}
read_xlsx("e:/Mystafs/blogswebsite/teneson/posts/R-introduction/BUDGET DAUDI HEALTH CENTRE 2022.xlsx")
```

the above tables are showing the importation of data from your directory into R, using Xlsx extension.

To this stage it's so clear that we have gain an insight on how to get started with R language and data importation ready to manipulate them and find results. So in next post we shall over see how we manipulate with data and lead us to final results. The next post  is the continuation of our lesson, where we will cover both data manipulation and statistics.


**Related  post.**