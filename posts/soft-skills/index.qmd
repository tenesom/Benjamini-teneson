---
title: "GitHub skills: Safeguard your soft properties and be a part of global changer"
author: "Benjamini Mpinga"
date: "2023-04-10"
categories: [Skills]
---
::: columns
:::: {.column width="50%"}

In today's society, the majority of people have the potential to make significant contributions to their communities. This means that there are only a few individuals who actively contribute while many others benefit from their contributions. While it is beneficial to be part of the group that gains knowledge, being surrounded by ignorant individuals poses a serious problem. In the modern era, learning has become an essential responsibility, thanks to the availability of knowledge at our fingertips through technological advancements.

::: 
:::: {.column width="50%"}

![](oceanLandIntera.jpg)
:::
:::: 

### Soft skills.

Reflecting on my past few years, I recall a time when I was completely unaware of online resources and tools like Google. I deliberately mention this because it was incredibly challenging for me to search for solutions to my pressing questions on platforms like Google or other online sources. As a result, I was limited to relying solely on information from books or what I had learned in school. Let me clarify that I'm not suggesting that relying on books is inadequate. However, I aim to emphasize the abundance of relevant and freely available online resources that can shed light on various subjects and expand one's knowledge.

::: columns
:::: {.column width="50%"}

Soft skills, in essence, encompass the additional knowledge one acquires through various means, including open-source online platforms. These skills prove highly relevant in addressing the current challenges faced by communities and enable individuals to stay updated with the rapid changes in modern technology. Therefore, there are no excuses for individuals not to pursue self-improvement, considering the wealth of contributors ready to support and guide them in their areas of interest.

::: 
:::: {.column width="50%"}

Drawing from my personal experience, today I would like to share a method for safely storing your digital assets online. I mention this because many of us possess numerous ideas and valuable digital content on our computers but are unsure where to store them securely, thus risking loss without proper backup measures. Today's lesson will provide you with guidance on how to securely store your written work, ideas, and discoveries.

::: 
:::: 

### About GitHub.

GitHub is indeed one of the leading and trusted online repositories for storing digital assets. In addition to its storage capabilities, GitHub offers a surprising feature: the ability to create URL addresses for your files with the .HTML extension, making them accessible as web links. This provides an excellent opportunity for you to share your knowledge with others. Now, let me guide you through the steps of creating a GitHub repository and the procedures for pushing your digital assets from your computer to your GitHub repository.

To ensure the safety of your software projects and protect them even in the event of a lost or irreparably damaged computer, it is advisable to have a backup solution in place. One highly recommended approach is to utilize a GitHub repository, which allows you to store your software assets online. As an active contributor in the software community, it's crucial to have a reliable backup method for your valuable work.

To get started with creating a GitHub account, you can follow the steps outlined below:

Visit the GitHub website at https://github.com/. On the GitHub homepage, click on the "Sign up" button located at the top right corner of the page. You will be prompted to enter your desired username, email address, and password for your GitHub account. Fill in the required information accordingly. Choose an appropriate plan based on your needs. GitHub offers both free and paid plans, with different features and benefits. For most individuals, the free plan is sufficient to get started. Once you've filled in the necessary details and selected a plan, click on the "Create account" button. GitHub may require you to verify your email address to complete the registration process. Check your email inbox for a verification message from GitHub and follow the instructions provided. After verifying your email address, you'll be directed to the GitHub website where you can further customize your profile and explore the various features and settings available.

Congratulations! You've successfully created a GitHub account. Now you can start utilizing GitHub repositories to store and manage your software projects, collaborate with others, and benefit from the version control capabilities it offers.

### Procedures to push properties to GitHub repository.

Before you proceed with pushing your properties to GitHub, it is important to ensure that your local repository on your computer is well-organized. Follow these steps to prepare your folders for pushing to GitHub. Ensure that all the necessary folders and files you intend to push to GitHub are organized within the same parent folder on your computer. This parent folder will serve as the root of your local repository.

Avoid using spaces in the names of your folders and files. While some programming languages can handle spaces in file and folder names, it is generally recommended to use underscores (_) or hyphens (-) instead. This helps to maintain compatibility and ensures smooth operation across different programming tools and platforms. Once you have organized your folders and files, you can proceed with the installation of Git Bash and follow these steps to push your properties to GitHub:

### Command lines at first commit.

Open the GitBash then write the following command lines. 

- cd e:
- cd e:/my_properties/teneson
- **git init**
- **git add .** 
- **git commit -m "comment"**
- **git remote add origin**
- **git push -u origin main**

### Command lines at second+ commit.

The first and second lines here under, are examples due to my folders arrangement in my computer, so you should not refer to them exactly as they are, instead you shall write depending on the folder arrangement on your computer. But from line 3 to 5, should be written as they are, only during the first commit to GitHub. Line 4, within a quotation marks, you are advised to write a comment message concerning your properties.

Open the GitBash then write the following command lines. 

- cd e:
- cd e/my_properties/teneson
- **git add .**
- **git commit -m "comment on changes you have made"**
- **git push**


**Related Posts:**
