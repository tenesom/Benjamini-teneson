{
  "hash": "14916399b5e6440650f1f83913ebdbc5",
  "result": {
    "markdown": "---\ntitle: \"R Programming: Beginner's introduction on Data manipulation.\"\nauthor: \"Benjamini Mpinga\"\ndate: \"2023-04-25\"\ncategories: [Skills]\n---\n\n\nR without data is just an Application. So to enjoy R programming then you need to deal with data. So in most cases you will  be given data from outsource. And most  of outsource data are not tidy, therefor you will need to tidy them before manipulation. Then you have to save them in your computer, tidy them, then model them, then share your findings. In R we use different approach when it comes to data manipulation, different from other languages, so once given data, the first thing to understand is its type.\n\n![](r_studio.jpg)\n\n\nThe data below are not in tidy form, therefor we have to tidy them firstly. We will not write every step of the process because i believe you have already got the concept from the last lesson, but you can see the function in the chunk, we have equated our data by giving it a name raw. And followed by the name of extension, then my local directory and the name of the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tidyverse\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.0     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.1     v tibble    3.1.8\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nrequire(lubridate)\nrequire(dplyr)\nrequire(lubridate)\nrequire(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: readxl\n```\n:::\n\n```{.r .cell-code}\nrequire(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: janitor\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n\n```{.r .cell-code}\nrequire(magrittr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: magrittr\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n:::\n\n```{.r .cell-code}\nrequire(readr)\nrequire(readxl)\n```\n:::\n\n\n### How to tidy data 1st Example.\n\n**world population data before tidying.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopul=read.csv(\"e:/Mystafs/blogswebsite/teneson/posts/R-2nd-leson/The world population data/world_population.csv\")\n```\n:::\n\n\n**world population data after tidying.**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopul=read.csv(\"e:/Mystafs/blogswebsite/teneson/posts/R-2nd-leson/The world population data/world_population.csv\") %>%\n clean_names() %>% \n  select(-c(2,4)) %>% \n pivot_longer(cols = 4:11, names_to = \"years\", values_to = \"populations\") %>% \n mutate(years = replace(years, years == \"x2000_population\",2000), \n        years = replace(years, years == \"x2010_population\",2010),\n        years = replace(years, years == \"x2015_population\",2015),\n        years = replace(years, years == \"x2020_population\",2020),\n        years = replace(years, years == \"x2022_population\",2022),\n        years = replace(years, years == \"x1990_population\",1990),\n        years = replace(years, years == \"x1980_population\",1980), \n        years = replace(years, years == \"x1970_population\",1970)) %>% \n  rename(area.km.sq = area_km_a2) %>% \n  rename(dens.km.sq = density_per_km_a2) %>% \n  rename(percentage = world_population_percentage) %>% \n  rename(growth.rate = growth_rate)\n```\n:::\n\n\n**How to save tidy data.** \n\n\n::: {.cell}\n\n```{.r .cell-code}\npopul %>% write.csv(\"clean_world_population.csv\")\n```\n:::\n\n\nThe data above show the raw data given from the original source which was collected and filed in csv extension, therefor in R programming language, you can't work with data the same were collected in other orders. So as we have seen in above procedures, you will need to tidy them to be supported  in R. and the above procedures are some of the few ways to deal with messy data you might come across with. \n\n### How to tidy data 2nd example.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nraw = read_excel(\"e:/Mystafs/blogswebsite/teneson/posts/R-2nd-leson/Tamisemi/Primary Enrolment by Age and Sex,2021.xls\")\n```\n:::\n\n\nSo step 2, we are going to equate our data again and rename column, then remove column 1,28 and 29, because they provide no necessary information therefor we shall remain with 26 column. ***Now our data is called moja***.We shall use function *\"clean names\"* of *\"Janitor package\"*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoja = raw %>% clean_names() %>% select(-c(1,28,29))\n```\n:::\n\n\nNow let's rename  our **7 to 26 column** because they are not well arranged, as we can see age and gender are both in same column, in order to put it easier for analysis, then we must separate them. But yet the data frame shows that ages of kids are not specified, some are actual and some are unspecific, therefore we are going to predict some values that can help in analysis, **where age is below 6 we shall put 5, and where is above 13 we shall put 14**, then we will specify in detail in an output. Here we shall use pivot function of janitor package which is in tidyverse package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmbili = moja %>% pivot_longer(names_to = \"kids\", values_to = \"number\", cols = 7:26) %>% \n  mutate(gender = c(\"boys\", \"girls\") %>% rep(times = 185460),\n         age = seq(5, 14, 1) %>% rep(each = 2) %>% rep(times = 18546)) \n```\n:::\n\n\n\nNow we deselect kids column and registration number column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntatu = mbili %>% select(-c(5,7))\n```\n:::\n\n\n\n### R Studio auto generated data.\n\nWe can also get data from R studio itself, Now lets jump strait to Rstudio on computer and see how you can get data,  and see how to tidy data and share the results. \n\n**Temperature Data.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample1 = rnorm(n = 10, mean = 26, sd = 2) %>% as_tibble() %>% mutate(sample = \"samp1\")\n\nsample2 = rnorm(n = 20, mean = 26, sd = 2) %>% as_tibble() %>% mutate(sample = \"samp2\")\n\nsample3 = rnorm(n = 30, mean = 26, sd = 2) %>% as_tibble() %>% mutate(sample = \"samp3\")\n\nsample4 = rnorm(n = 40, mean = 26, sd = 2) %>% as_tibble() %>% mutate(sample = \"samp4\")\n\nsample5 = rnorm(n = 50, mean = 26, sd = 2) %>% as_tibble() %>% mutate(sample = \"samp5\")\n```\n:::\n\n\n#### Bind rows and columns.\n\nHow to bind different samples to a one data set, you either combine rows or columns. We use the function **bind_rows/bind_col.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata.sample = bind_rows(sample1,\n                        sample2,\n                        sample3,\n                        sample4,\n                        sample5)\n```\n:::\n\n\nWe have created different sample size and bind five samples together, we have used the function **binding_rows** to bind. We have named them **(data.sample)**. But these data are auto-generated from the system, so they change from time to time as you run your chunk. Therefor in order to permanently use them without changes, then you'll need to save them in your directory.\n\n### HOW TO SAVE AUTO GENERATED DATA TO YOUR COMPUTER.\n\nWhen you import data into R, we use the function **read_**. But to save generated data from the system to local directory we apply the function **write_**, and you may save it in whatever extension you often use. Here under is the function plus application to save the data generated from the system in local directory. Our new data will be called **datasample.** We put a comment (#) so that a chunk not to run. still it show how it's applicable in case you want to save your data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#data.sample %>% write_csv(\"datasample.csv\")\n```\n:::\n\n\nNow that our data are saved in our local directory, then to use it we must import in R. In importation we shall equate it as **supa**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupa = read_csv(\"datasample.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 150 Columns: 2\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr (1): sample\ndbl (1): value\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsupa %>% \n  ggplot(aes(x = value, colour = sample, fill = sample))+\n  geom_density(alpha = 0.1)+\n  theme_bw()+theme(panel.grid.major = element_blank())+\n  theme(panel.grid.minor = element_blank())+\n  theme(legend.position = \"bottom\")+theme(axis.text.x = element_text(colour = \"darkblue\", size = 10),axis.text.y = element_text(colour = \"darkblue\", size = 10),axis.title = element_text(colour = \"darkblue\", size = 13),legend.text = element_text(colour = \"darkblue\"),legend.title = element_text(colour = \"darkblue\", size = 10))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nabove figure show all sample's result together, it is easier to present samples result in one figure, but the main purpose is to be understandable. Therefor it may be a bit harder for a viewer to understand the above figure. So in such situation we can opt to present our figure in separate samples. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupa %>% ggplot(aes(x = value, colour = sample, fill =sample))+\n  geom_density(alpha = 0.4)+ theme_bw()+\n  theme(legend.background = element_blank())+\n  facet_wrap(~sample)+\n  theme(legend.position = c(0.8,0.25),panel.grid = element_line(colour = \"white\"),axis.title = element_text(colour = \"darkblue\", size =13),axis.text = element_text(colour = \"darkblue\", size = 10),strip.background = element_rect(fill = \"lightblue\"),strip.text.x = element_text(colour = \"darkblue\", size = 10),legend.text = element_text(colour = \"darkblue\", size = 10),legend.title = element_text(colour = \"darkblue\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThe above figure samples now are clearly observed. Also proves the concept that \"you are in good position to get right result when you have enough sample\". Therefor you will need to consider the sample size before rushing to analysis.\n\n### R Studio AUTO GENERATED DATA 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial = iris %>% \n  as_tibble() %>% \n  janitor::clean_names() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial %$% max(sepal_length, na.rm = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.9\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial %$% min(sepal_length, na.rm = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4.3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial %$% median(sepal_length, na.rm = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.8\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial %$% mean(sepal_length, na.rm = TRUE) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.843333\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial.longer = iris %>% \n  as_tibble() %>% \n  janitor::clean_names() %>% \n  pivot_longer(names_to = \"variable\", values_to = \"value\", cols = 1:4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial.longer %>% \n  ggplot(aes(x = species, y = value, color = variable)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial.longer %>% \n  ggplot(aes(x = species, y = value, fill = variable)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial.longer %>% \n  ggplot(aes(x = species, y = value, fill = variable)) +\n  geom_boxplot() +\n  facet_wrap(~variable)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial.longer %>% \n  ggplot(aes(x = species, y = value, fill = variable)) +\n  geom_boxplot() +\n  facet_wrap(~variable, scales = \"free_y\") +\n  theme_bw() +\n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major = element_line(linetype = \"dashed\", colour = \"grey90\"),\n        axis.text = element_text(colour = \"black\", size = 10),\n        axis.title = element_text(colour = \"black\", size = 11),\n        legend.background = element_rect(colour = \"black\", fill = NA),\n        legend.text = element_text(colour = \"black\", size = 10),\n        strip.background = element_rect(fill = NA),\n        strip.text = element_text(colour = \"black\", size = 10)) +\n  labs(x = \"Species\", y = \"Length (cm)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrial.longer %>% \n  ggplot(aes(x = species, y = value, fill = variable)) +\n  geom_boxplot() +\n  facet_wrap(~variable, scales = \"free_y\") +\n  theme_bw() +\n  theme(panel.grid.minor.y = element_blank(),\n        panel.grid.major = element_line(linetype = \"dashed\", colour = \"grey90\"),\n        axis.text = element_text(colour = \"black\", size = 10),\n        axis.title = element_text(colour = \"black\", size = 11),\n        legend.position = \"none\",\n        strip.background = element_rect(fill = \"NA\"),\n        strip.text = element_text(colour = \"black\", size = 10)) +\n  labs(x = \"Species\", y = \"Length (cm)\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n**Related pots**",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}