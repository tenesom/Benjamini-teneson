{
  "hash": "ad18a2ebb6449a7f3b65381bea78c019",
  "result": {
    "markdown": "---\ntitle: \"R Programming: World pupulation and most popular countries.\"\nauthor: \"Benjamini Mpinga\"\ndate: \"2023-04-15\"\ncategories: [Skills]\n---\n\n\n### WORLD POPULATION DATA.\n\n::: columns\n:::: {.column width=\"50%\"}\n\n**WORLD POPULATION DATA: **This post is the result of R programming analysis, which basically demonstrate the most current world population of each continent and most popular countries within a continental level. R is a powerful language when it comes to analysis and documentation, this post is the one of R's multiple way of communication. i have also generated pdf and word documents through from R Studio editor. \n::: \n:::: {.column width=\"50%\"}\n\n![](dunia1.jpg)\n\n::: \n:::: \n\n**Questions.**\n\n1. Find the world's most popular continent.\n1. The most popular country in every continent.\n1. The trend of the world population based on data given. \n\nworld's population data from 1970 to 2022.\n\n\n### Data Summary.\n\nThe data below requires, to find the most popular  continent on Earth, the most popular country on Earth and the general population growth trend. So we are going to import our data in R studio then the next step is to look weather the data are tidy or not, if **Yes** then we straight move to answer the question and if **Not** then we need to tidy them so that we are able to use them.\n\n#### Choosen packages.\n\n1. Tidyverse::\n1. readr::\n1. Lubridate::\n1. readxl::\n1. magrittr::\n1. janitor::\n1. dplyr::\n\n**About the chosen package.**\n\nThese packages are chosen specifically to handle all activities in this task. Each package functions accordingly. This packages provide several functions that are key tools to facilitate the coding. One can choose the way makes him or her relevant in doing activities in coding. Especially when it comes to package arrangements, firstly understanding of the result required, is usually every coder's concerns. But how one apply the calling of packages differ from one another.\n\nMy self i prefer to call all the package in the very first Chunk, this is because i already know all the necessary function() I'll be required to use when coding. So the mentioned package in this assignment are already set in a first chunk.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tidyverse\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --\nv dplyr     1.1.1     v readr     2.1.4\nv forcats   1.0.0     v stringr   1.5.0\nv ggplot2   3.4.2     v tibble    3.2.1\nv lubridate 1.9.2     v tidyr     1.3.0\nv purrr     1.0.1     \n-- Conflicts ------------------------------------------ tidyverse_conflicts() --\nx dplyr::filter() masks stats::filter()\nx dplyr::lag()    masks stats::lag()\ni Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nrequire(lubridate)\nrequire(dplyr)\nrequire(lubridate)\nrequire(readxl)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: readxl\n```\n:::\n\n```{.r .cell-code}\nrequire(janitor)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: janitor\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n```\n:::\n\n```{.r .cell-code}\nrequire(magrittr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: magrittr\n\nAttaching package: 'magrittr'\n\nThe following object is masked from 'package:purrr':\n\n    set_names\n\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n:::\n\n```{.r .cell-code}\nrequire(readr)\nrequire(readxl)\n```\n:::\n\n\n#### Data Entry.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworld = read_csv(\"e:/my_staffs/Blogs/teneson/posts/Current-world-pop/The world population data/world_population.csv\") \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 234 Columns: 17\n-- Column specification --------------------------------------------------------\nDelimiter: \",\"\nchr  (4): CCA3, Country, Capital, Continent\ndbl (13): Rank, 2022 Population, 2020 Population, 2015 Population, 2010 Popu...\n\ni Use `spec()` to retrieve the full column specification for this data.\ni Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nThe table above has some input that can not be proper managed with R language, so we must clean them and left with what we are going to use to answer the question asked. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npop = world %>% \n  clean_names() %>% \n  select(-c(1:2, 4, 7:17)) %>% \n  rename(\"population\" = 3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncon = pop %>% filter(continent == \"Asia\")\n\ncon1 = pop %>% filter(continent == \"Africa\")\n\ncon2 = pop %>% filter(continent == \"North America\")\n\ncon3 = pop %>% filter(continent == \"South America\")\n\ncon4 = pop %>% filter(continent == \"Europe\")\n\ncon5 = pop %>% filter(continent == \"Oceania\")\n```\n:::\n\n\n\n### CONTINENTS POPULATION.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncont = bind_rows(con, con1, con2, con3, con4, con5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cont, aes(x = continent, y = population))+ \n  geom_col(fill = \"blue\")+ \n  theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\ni Please use the `linewidth` argument instead.\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n***Finally a graph above demonstrate the world population by continent, the most to miner populated continent on Earth. Asia is leading the chart followed by Africa.***\n\n::: columns\n:::: {.column width=\"50%\"}\n\n### ASIA\n\nThe graphs below show Asian continent population from high to low level, graph number one is not well arranged, sample were entered to the database the way they were collected, in fact without consideration of proper arrangement from the highest to the lowest number, it shows the original data, so we had to arranged it in an order that can be proper viewed In graph number two in ascending order. We use the function reorder() of the package tidyverse.\n\nTherefor The Red graph shows countries with population more than Fifty millions, The Blue graph shows countries with population between Ten to Fifty millions, While the green graph shows the countries with less than Ten millions.\n\nThe first graph doesn't allow eyes of the reader to relax when reading, So we have to generate another graph by flip our graph so that the names of the countries can be well viewed, we use the function Coord_flip() of the package tidyverse.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nasia\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 x 3\n   country     continent population\n   <chr>       <chr>          <dbl>\n 1 Afghanistan Asia        41128771\n 2 Armenia     Asia         2780469\n 3 Azerbaijan  Asia        10358074\n 4 Bahrain     Asia         1472233\n 5 Bangladesh  Asia       171186372\n 6 Bhutan      Asia          782455\n 7 Brunei      Asia          449002\n 8 Cambodia    Asia        16767842\n 9 China       Asia      1425887337\n10 Georgia     Asia         3744385\n# i 40 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nasia %>% \n  ggplot(aes(x = country, y = population))+\n geom_col(fill = \"dark blue\")+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = \"dark blue\", size = 0.4), \n        axis.text = element_text(colour = \"dark blue\", size = 11), \n        axis.title = element_text(colour = \"dark blue\", size = 16),\n        legend.key = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nasia %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = , size = 0.4), \n        axis.text = element_text(colour = \"blue\", size = 11), \n        axis.title = element_text(colour = \"blue\", size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n\n```{.r .cell-code}\nasia %>% \n    filter(population >50000000) %>% \n  ggplot(aes(x = country, y = population))+\n   geom_col(aes(reorder(x = country, -population)), fill = \"red\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-3.png){width=672}\n:::\n\n```{.r .cell-code}\nasia %>% \n    filter(population >10000000, population <50000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-4.png){width=672}\n:::\n\n```{.r .cell-code}\nasia %>% \n    filter(population <10000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"dark green\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-5.png){width=672}\n:::\n:::\n\n\n::: \n:::: {.column width=\"50%\"}\n\n### AFRICA\n\nThe graphs below show Africa continent population from high to low level, graph number one is not well arranged, sample were entered to the database the way they were collected, in fact without consideration of proper arrangement from the highest to the lowest number, it shows the original data, so we had to arranged it in an order that can be proper viewed In graph number two in ascending order. We use the function reorder() of the package tidyverse.\n\nTherefor The Red graph shows countries with population more than Fifty millions, The Blue graph shows countries with population between Ten to Fifty millions, While the green graph shows the countries with less than Ten millions. \n\nThe first graph doesn't allow eyes of the reader to relax when reading, So we have to generate another graph by flip our graph so that the names of the countries can be well viewed, we use the function Coord_flip() of the package tidyverse.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 57 x 3\n   country                  continent population\n   <chr>                    <chr>          <dbl>\n 1 Algeria                  Africa      44903225\n 2 Angola                   Africa      35588987\n 3 Benin                    Africa      13352864\n 4 Botswana                 Africa       2630296\n 5 Burkina Faso             Africa      22673762\n 6 Burundi                  Africa      12889576\n 7 Cameroon                 Africa      27914536\n 8 Cape Verde               Africa        593149\n 9 Central African Republic Africa       5579144\n10 Chad                     Africa      17723315\n# i 47 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nafrica %>% \n  ggplot(aes(x = country, y = population))+\n geom_col(fill = \"dark blue\")+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = \"dark blue\", size = 0.4), \n        axis.text = element_text(colour = \"dark blue\", size = 11), \n        axis.title = element_text(colour = \"dark blue\", size = 16),\n        legend.key = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\nafrica %>% \n  ggplot(aes(x = country, y = population))+\n   geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = , size = 0.4), \n        axis.text = element_text(colour = \"blue\", size = 11), \n        axis.title = element_text(colour = \"blue\", size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-2.png){width=672}\n:::\n\n```{.r .cell-code}\nafrica %>% \n  filter(population >50000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"red\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-3.png){width=672}\n:::\n\n```{.r .cell-code}\nafrica %>% \n  filter(population >10000000, population <50000000) %>% \n  ggplot(aes(x = country, y = population))+\n   geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-4.png){width=672}\n:::\n\n```{.r .cell-code}\nafrica %>% \n  filter(population <10000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"dark green\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-5.png){width=672}\n:::\n:::\n\n\n::: \n:::: \n\n::: columns\n:::: {.column width=\"50%\"}\n\n### NORTH AMERICA\n\nThe graphs below show North America continent population from high to low level, graph number one is not well arranged, sample were entered to the database the way they were collected, in fact without consideration of proper arrangement from the highest to the lowest number, it shows the original data, so we had to arranged it in an order that can be proper viewed In graph number two in ascending order. We use the function reorder() of the package tidyverse.\n\nTherefor The Red graph shows countries with population more than Fifty millions, The Blue graph shows countries with population between Ten to Fifty millions, While the green graph shows the countries with less than Ten millions. \n\nThe first graph doesn't allow eyes of the reader to relax when reading, So we have to generate another graph by flip our graph so that the names of the countries can be well viewed, we use the function Coord_flip() of the package tidyverse.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnotame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 40 x 3\n   country                continent     population\n   <chr>                  <chr>              <dbl>\n 1 Anguilla               North America      15857\n 2 Antigua and Barbuda    North America      93763\n 3 Aruba                  North America     106445\n 4 Bahamas                North America     409984\n 5 Barbados               North America     281635\n 6 Belize                 North America     405272\n 7 Bermuda                North America      64184\n 8 British Virgin Islands North America      31305\n 9 Canada                 North America   38454327\n10 Cayman Islands         North America      68706\n# i 30 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnotame %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(fill = \"dark blue\")+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = \"dark blue\", size = 0.4), \n        axis.text = element_text(colour = \"dark blue\", size = 11), \n        axis.title = element_text(colour = \"dark blue\", size = 16),\n        legend.key = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnotame %>% \n  ggplot(aes(x = country, y = population))+\n   geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = , size = 0.4), \n        axis.text = element_text(colour = \"blue\", size = 11), \n        axis.title = element_text(colour = \"blue\", size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\nnotame %>% \n  filter(population >50000000) %>% \n  ggplot(aes(x = country, y = population))+\n   geom_col(aes(reorder(x = country, -population)), fill = \"red\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n\n```{.r .cell-code}\nnotame %>% \n  filter(population >1000000, population <50000000) %>% \n  ggplot(aes(x = country, y = population))+\n   geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-4.png){width=672}\n:::\n\n```{.r .cell-code}\nnotame %>% \n  filter(population <10000000) %>% \n  ggplot(aes(x = country, y = population))+\n geom_col(aes(reorder(x = country, -population)), fill = \"dark green\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-5.png){width=672}\n:::\n:::\n\n\n::: \n:::: {.column width=\"50%\"}\n\n### EUROPE\n\nThe graphs below show Europe continent population from high to low level, graph number one is not well arranged, sample were entered to the database the way they were collected, in fact without consideration of proper arrangement from the highest to the lowest number, it shows the original data, so we had to arranged it in an order that can be proper viewed In graph number two in ascending order. We use the function reorder() of the package tidyverse.\n\nTherefor The Red graph shows countries with population more than Fifty millions, The Blue graph shows countries with population between Ten to Fifty millions, While the green graph shows the countries with less than Ten millions.\n\nThe first graph doesn't allow eyes of the reader to relax when reading, So we have to generate another graph by flip our graph so that the names of the countries can be well viewed, we use the function Coord_flip() of the package tidyverse.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\neurope\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 50 x 3\n   country                continent population\n   <chr>                  <chr>          <dbl>\n 1 Albania                Europe       2842321\n 2 Andorra                Europe         79824\n 3 Austria                Europe       8939617\n 4 Belarus                Europe       9534954\n 5 Belgium                Europe      11655930\n 6 Bosnia and Herzegovina Europe       3233526\n 7 Bulgaria               Europe       6781953\n 8 Croatia                Europe       4030358\n 9 Cyprus                 Europe       1251488\n10 Czech Republic         Europe      10493986\n# i 40 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n  europe %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(fill = \"dark blue\")+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = \"dark blue\", size = 0.4), \n        axis.text = element_text(colour = \"dark blue\", size = 11), \n        axis.title = element_text(colour = \"dark blue\", size = 16),\n        legend.key = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n\n```{.r .cell-code}\neurope %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = , size = 0.4), \n        axis.text = element_text(colour = \"blue\", size = 11), \n        axis.title = element_text(colour = \"blue\", size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-2.png){width=672}\n:::\n\n```{.r .cell-code}\n  europe %>% \n  filter(population >50000000) %>% \n  ggplot(aes(x = country, y = population))+\n geom_col(aes(reorder(x = country, -population)), fill = \"red\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-3.png){width=672}\n:::\n\n```{.r .cell-code}\neurope %>% \n  filter(population >10000000, population <50000000) %>% \n  ggplot(aes(x = country, y = population))+\n geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-4.png){width=672}\n:::\n\n```{.r .cell-code}\neurope %>% \n  filter(population <10000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"dark green\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-18-5.png){width=672}\n:::\n:::\n\n\n::: \n:::: \n\n::: columns\n:::: {.column width=\"50%\"}\n\n### SOUTH AMERICA.\n\nThe graphs below show South America continent population from high to low level, graph number one is not well arranged, sample were entered to the database the way they were collected, in fact without consideration of proper arrangement from the highest to the lowest number, it shows the original data, so we had to arranged it in an order that can be proper viewed In graph number two in ascending order. We use the function reorder() of the package tidyverse.\n\nTherefor The Red graph shows countries with population more than Fifty millions, The Blue graph shows countries with population between Ten to Fifty millions, While the green graph shows the countries with less than Ten millions.\n\nThe first graph doesn't allow eyes of the reader to relax when reading, So we have to generate another graph by flip our graph so that the names of the countries can be well viewed, we use the function Coord_flip() of the package tidyverse.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsotame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 14 x 3\n   country          continent     population\n   <chr>            <chr>              <dbl>\n 1 Argentina        South America   45510318\n 2 Bolivia          South America   12224110\n 3 Brazil           South America  215313498\n 4 Chile            South America   19603733\n 5 Colombia         South America   51874024\n 6 Ecuador          South America   18001000\n 7 Falkland Islands South America       3780\n 8 French Guiana    South America     304557\n 9 Guyana           South America     808726\n10 Paraguay         South America    6780744\n11 Peru             South America   34049588\n12 Suriname         South America     618040\n13 Uruguay          South America    3422794\n14 Venezuela        South America   28301696\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsotame %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(fill = \"dark blue\")+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = \"dark blue\", size = 0.4), \n        axis.text = element_text(colour = \"dark blue\", size = 11), \n        axis.title = element_text(colour = \"dark blue\", size = 16),\n        legend.key = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsotame %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = , size = 0.4), \n        axis.text = element_text(colour = \"blue\", size = 11), \n        axis.title = element_text(colour = \"blue\", size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-2.png){width=672}\n:::\n\n```{.r .cell-code}\nsotame %>% \n  filter(population >50000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"red\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-3.png){width=672}\n:::\n\n```{.r .cell-code}\nsotame %>% \n  filter(population >10000000, population <50000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-4.png){width=672}\n:::\n\n```{.r .cell-code}\nsotame %>% \n  filter(population <10000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"dark green\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-21-5.png){width=672}\n:::\n:::\n\n\n::: \n:::: {.column width=\"50%\"}\n\n### OCEANIA.\n\nThe graphs below show Oceania continent population from high to low level, graph number one is not well arranged, sample were entered to the database the way they were collected, in fact without consideration of proper arrangement from the highest to the lowest number, it shows the original data, so we had to arranged it in an order that can be proper viewed In graph number two in ascending order. We use the function reorder() of the package tidyverse.\n\nTherefor The Red graph shows countries with population more than Fifty millions, The Blue graph shows countries with population between Ten to Fifty millions, While the green graph shows the countries with less than Ten millions.\n\nThe first graph doesn't allow eyes of the reader to relax when reading, So we have to generate another graph by flip our graph so that the names of the countries can be well viewed, we use the function Coord_flip() of the package tidyverse.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nocean\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 23 x 3\n   country          continent population\n   <chr>            <chr>          <dbl>\n 1 American Samoa   Oceania        44273\n 2 Australia        Oceania     26177413\n 3 Cook Islands     Oceania        17011\n 4 Fiji             Oceania       929766\n 5 French Polynesia Oceania       306279\n 6 Guam             Oceania       171774\n 7 Kiribati         Oceania       131232\n 8 Marshall Islands Oceania        41569\n 9 Micronesia       Oceania       114164\n10 Nauru            Oceania        12668\n# i 13 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nocean %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(fill = \"dark blue\")+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = \"dark blue\", size = 0.4), \n        axis.text = element_text(colour = \"dark blue\", size = 11), \n        axis.title = element_text(colour = \"dark blue\", size = 16),\n        legend.key = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n```{.r .cell-code}\nocean %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = , size = 0.4), \n        axis.text = element_text(colour = \"blue\", size = 11), \n        axis.title = element_text(colour = \"blue\", size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-2.png){width=672}\n:::\n\n```{.r .cell-code}\nocean %>% \n  filter(population >50000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"red\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-3.png){width=672}\n:::\n\n```{.r .cell-code}\nocean %>% \n  filter(population >10000000, population <50000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"blue\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-4.png){width=672}\n:::\n\n```{.r .cell-code}\nocean %>% \n  filter(population <10000000) %>% \n  ggplot(aes(x = country, y = population))+\n  geom_col(aes(reorder(x = country, -population)), fill = \"dark green\")+\n  coord_flip()+\n   theme(panel.background = element_rect(fill = 0.4), \n        axis.line = element_line(colour = 1, size = 0.4), \n        axis.text = element_text(colour = 1, size = 11), \n        axis.title = element_text(colour = 17, size = 16),\n         legend.position = \"non\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-24-5.png){width=672}\n:::\n:::\n\n\n::: \n:::: \n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}